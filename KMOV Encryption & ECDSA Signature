︠69ac6d08-35de-42f0-adac-2612ec9a2aab︠
import numpy
import itertools
import math

############################################################################################################################
# For all these procedures we are working with elliptic curve (EC) groups over Z_p where p is a prime number larger than 3.#
# An Elliptic Curve group will be represented by a triple [A,B,p] where                                                    #
#      (1) p is a prime number larger than 3                                                                               #
#      (2) A is the coefficient of x and                                                                                   #
#      (3) B is the constant term in  y^2 = x^3 + A*x + B mod p.                                                           #
#                                                                                                                          #
# A point in the group will be represented as a pair [x,y] where                                                           #
#      (1)  x is the x-coordinate of a solution                                                                            #
#      (2)  y is the y-coordinate of a solution                                                                            #
#      (3)  The identity will be represented by []                                                                         #
############################################################################################################################


def TonSh (a, Prime):
    if kronecker(a, Prime) == -1:
        pass
        print ("{0} does not have a square root mod {1}".format(a, Prime))
        return None
    elif Prime % 4 == 3:
        x = power_mod(ZZ(a), ZZ((Prime+1)/4),ZZ(Prime))
        return(x)
    else:
        #################################################################################
        # Determine e so that Prime-1 = (2^e)*q for some odd number q                   #
        #################################################################################

        e = ZZ(0)
        q = ZZ(Prime - 1)
        for j in itertools.count(1):
            if q % 2 == 0:
                e = ZZ(e + 1)
                q = ZZ(q / 2)
            else:
                break
        for i in range(1, 101):
            n = i
            if kronecker(n, Prime) == -1:
                break
        z = power_mod(ZZ(n),ZZ(q),ZZ(Prime))
        y = ZZ(z)
        r = ZZ(e)
        x = power_mod(ZZ(a),ZZ( (q-1)/2),ZZ( Prime))
        b = (a * x ** 2) % Prime
        x = (a * x) % Prime
        for i in itertools.count(1):
            if b == 1:
                break
            else:
                for m in itertools.count(1):
                    t = power_mod(ZZ(b), ZZ(2^m) ,  ZZ(Prime))
                    if t == 1:
                        mm = m
                        break
                t = power_mod(ZZ(y), ZZ(2^(r - mm - 1)),ZZ(Prime))
                y = power_mod(ZZ(t), ZZ(2),ZZ(Prime))
                r = mm
                x = (x * t) % Prime
                b = (b * y) % Prime
        return(x)
# ECSearch
import itertools
def ECSearch (lowerbound, upperbound, Group):
    p = Group[2]
    a = Group[0]
    b = Group[1]
    if (4 * a ** 3 + 27 * b ** 2) % p == 0:
        print ("This is not an elliptic curve.")
    else:
        for j in itertools.count(lowerbound):
            if j==lowerbound-1 or j>upperbound or j>upperbound:
                return "not found"
            j=j%p
            if kronecker(j ** 3 + a * j + b, p) == 1:
                x = (j ** 3 + a * j + b) % p
                var('z')
                L=TonSh(x,p)
                y = L
                return([j,y])

import sympy.ntheory
def FermatGreat (N):
    if sympy.ntheory.isprime(N):
        if N % 4 == 1:
            Z = two_squares(N)
            #print(Z)
            return(Z)
        else:
            print ("{0} is prime, but {1} mod 4 = 3".format(N, N))
    else:
        print ("{0} is not prime\n".format(N))
#ECAdd
def ECAdd (Point1, Point2, Group):
    a = Group[0]
    b = Group[1]
    p = Group[2]
    if(Point1!=[]):
        x1 = Point1[0]
        y1 = Point1[1]
    if(Point2!=[]):
        x2 = Point2[0]
        y2 = Point2[1]
    if (4 * a ** 3 + 27 * b ** 2) % p == 0:
        print ("This is not an elliptic curve.")
    elif Point1 != [] and y1 ** 2 % p != (x1 ** 3 + a * x1 + b) % p:
        print ("Point 1 is not on the elliptic curve. \n")
    elif Point2 != [] and y2 ** 2 % p != (x2 ** 3 + a * x2 + b) % p:
        print ("Point 2 is not on the elliptic curve. \n")
    else:
        if Point1 == []:
            R = Point2
        elif Point2 == []:
            R = Point1
        else:
            if x1 == x2 and 0 == (y1 + y2) % p:
                R = []
            elif x1 == x2 and y1 == y2:
                R = ECDouble(Point1, Group)
            else:
                s = ((y1 - y2) / (x1 - x2)) % p
                x = (s ** 2 - x1 - x2) % p
                y = (s * (x1 - x) - y1) % p
                R = [x,y]
    return(R)
def ECDouble (Point, Group):
    a = Group[0]
    b = Group[1]
    p = Group[2]
    if Point != []:
        x1 = Point[0]
        y1 = Point[1]
        if (4 * a ** 3 + 27 * b ** 2) % p == 0:
            print ("This is not an elliptic curve.")
        elif Point != [] and y1 ** 2 % p != (x1 ** 3 + a * x1 + b) % p:
            print ("The point to double is not on the elliptic curve.")
        elif y1 == 0:
            R = []
        else:
            s = mod((3 * x1 ** 2 + a) / y1 / 2, p)
            x = (s ** 2 - 2 * x1) % p
            y = (s * (x1 - x) - y1) % p
            R = [x,y]
    else:
        R = []
    return(R)

def ECInverse (Point, Group):
    if Point == []:
        return(Point)
    else:
        p = Group[2]
        x = Point[0]
        y = Point[1]
        return([x,(p - y) % p])
def ECTimes (Point, scalar, Group):
    ECIdentity=[]
    if Point == ECIdentity or scalar == 0:
        return(ECIdentity)
    else:
        E=EllipticCurve(GF(Group[2]),[Group[0],Group[1]])
        EPoint = E(Point[0],Point[1])
        cgret = scalar*EPoint
        if(cgret[0]==0 and cgret[1]==1 and cgret[2]==0):
            return ECIdentity
        return([cgret[0],cgret[1]])



def GroupOrder(Group): # Computes order of an elliptic curve group
    E = EllipticCurve(GF(Group[2]),[Group[0],Group[1]])
    return E.order()


def findptOrder(point,group): # Computes the order of a point on the elliptic curve group
    E = EllipticCurve(GF(group[2]),[group[0],group[1]])
    Ep = E(point[0],point[1])
    return Ep.additive_order()


def Rhof(point,P,Q,Group,j):
    if point!=[]:
        pointMod3 = ZZ(mod(point[0],3))
        if pointMod3 == 0:
            pt = ECAdd(point,P,Group)
        elif pointMod3 == 1:
            pt = ECDouble(point,Group)
        else:
            pt = ECAdd(point,Q,Group)
        return pt
    return None
def Rhofcoef(a,b,point,gorder):
    a1 = a
    b1 = b
    if point!=[]:
        pointMod3 = ZZ(mod(point[0],3))
        if pointMod3 == 0:
            a1 = ZZ(mod(a1+1,gorder))
        elif pointMod3 == 1:
            a1=(2*a1) % gorder
            b1=(2*b1) % gorder
        else:
            b1 = (b1+1) %gorder
        return [a1,b1]

def RhoOnEC(Q,P,Group,gorder):  #g --> P, y--> Q
    debug = False
    z=P
    t=P
    ab = [1,0]
    AB = [1,0]
    ############ This is Floyd's Cycle-Finding Method
    foundOne = False
    for j in itertools.count(1):
        if j>2425 and debug:
            print ("top of the loop {0}".format(j))
            print (ab)
            print (AB)
        ab = Rhofcoef(ab[0],ab[1],z,gorder)
        z = Rhof(z,P,Q,Group,j)
        if z==[]:
            d = gcd(ab[1],gorder)
            x = ZZ(mod(ab[0]/(-ab[1]), (gorder/d)))
            return x
        AB = Rhofcoef(AB[0],AB[1],t,gorder)
        t = Rhof(t,P,Q,Group,j)
        if t==[]:
            d = gcd(AB[1],gorder)
            x = ZZ(mod(AB[0]/(-AB[1]), (gorder/d)))
            return x
        AB = Rhofcoef(AB[0],AB[1],t,gorder)
        t = Rhof(t,P,Q,Group,j)
        if j==2458 and debug:
            print (t)
            print (z)
            print (z==t)
        if t==[]:
            d = gcd(AB[1],gorder)
            x = ZZ(mod(AB[0]/(-AB[1]) , (gorder/d)))
            return x
        elif z==t:
            d = gcd(AB[1]-ab[1],gorder)
            x =ZZ(mod((ab[0]-AB[0])/(AB[1]-ab[1]),(gorder/d)))
            return x





def ASCIIPad(Mess,Mod):
    K = []
    for letter in Mess:
        K.append(ord(letter))
    L = Mod.ndigits()
    l = len(K)
    y = ZZ(math.floor(L/3))
    count = 0
    padded = []
    buffer = ""
    for numChar in K:
        numChar+=100
        buffer+=str(numChar)
        count+=1
        if count==y:
            padded.append(ZZ(buffer))
            buffer = ""
            count = 0
    if len(buffer)>0:
        padded.append(ZZ(buffer))
    return padded


def ASCIIDepad(Number):
    N = "";
    n = Number.ndigits() % 3;
    if (n > 0):
        print("This is not a padded ASCII string\n");
    else:
        L = [((Number - (Number % (1000^i)))/1000^i)%1000 - 100 for i in range(Number.ndigits()/3)];
        for i in range(Number.ndigits()/3):
            N = chr(L[i]) + N;
    return(N);

def ECEmbed (Message, gp, tolerance):
    p = ZZ(math.floor(gp[2] / (tolerance + 1)))
    M = ASCIIPad(Message, p)
    packets = len(M)
    pointlist = [0]*packets
    for j in range(0, packets ):
        N = M[j]
        pointlist[j] = ECSearch(tolerance * N, tolerance * (N + 1) - 1, gp)
    return(pointlist)

def ECUnembed (pointlist, tolerance):
    k = len(pointlist)
    paddedasciilist=[0]*k
    for j in range(0, k ):
        pointlist[j][0]=ZZ(pointlist[j][0])
        toType = ZZ(QQ((pointlist[j][0])/tolerance).floor())
        paddedasciilist[j] = ((pointlist[j][0])/tolerance).floor()
    returnStr = ""
    for paddedItem in paddedasciilist:
        buffer = ASCIIDepad(paddedItem)
        returnStr+= buffer
    return returnStr

def ECEncrypt(M,g,r,b,G,t):
    m=ECEmbed(M,G,t)
    for i in range(len(m)):
        c1 = ECTimes(b,r,G)
        c1 = ECAdd(c1,m[i],G)
        c2 = ECTimes(g,r,G)
        C[i] = [c1,c2]
    return C

def ECDecryption(C,x,G,T):
    M = [0]*len(C)
    for i in range(len(C)):
        temp = ECTimes(C[i][1],x,G)
        temp = ECAdd(C[i][0],ECInverse(temp,G),G)
        M[i] = temp
    P = ECUnembed(M,T)
    return P

def listproduct (primelist):
    x = primelist
    k = len(primelist)
    #print x
    result = 1
    for i in range(0, k):
        result = result * x[i][0] ^ x[i][1]
    return(result)

def listptorder (pt, Group, factoredGpOrder):
    ECIdentity = []
    x = factoredGpOrder
    k = len(factoredGpOrder)
    orderlist = []
    result = listproduct(factoredGpOrder)
    for i in range(0, k ):
        p =  x[i][0]
        a =  x[i][1]
        ord = 0
        for j in range(0, a ):
            try:
                result = ZZ(result / p)
                test = ECTimes(pt, result, Group)
                if test != ECIdentity:
                    result = result * p
                    ord = ord + 1
            except:
                pass
        if 0 < ord:
            orderlist.append([p,ord])
    returnlist = []
    return orderlist

def primeHPSonEC (y,g,Group,p):
    newg = []
    for j in itertools.count(0):
        if y == newg:
            break
        newg = ECAdd(newg, g, Group)
    return(j)


def powerHPSonEC (y,g,og,p,a,Group):
    gp = ECTimes(g, ZZ(og / p), Group)
    newog = og
    newy = y
    c = 0
    partx = 0
    for i in range(0, a ):
        newy = ECAdd(y, ECInverse(ECTimes(g, partx, Group), Group), Group)
        newog = ZZ(newog / p)
        ypower = ECTimes(newy, newog, Group)
        c = primeHPSonEC(ypower, gp, Group, p)
        partx = partx + c * p ** i
    return(partx)

def HPSonEC (y,g,Group,factoredGpOrder):
    X = 0
    Ord = 1
    K = listptorder(g, Group, factoredGpOrder)
    k = len(K)
    ordg = listproduct(K)
    for j in range(0, k):
        p = K[j][0]
        powerp = K[j][1]
        partx = powerHPSonEC(y, g, ordg, p, powerp, Group)
        if j == 0:
            X = partx
            Ord = p ** powerp
        else:
            X = crt([X,partx], [Ord,p ^ powerp])
            Ord = Ord * (p ^ powerp)
    return(X)

def BSGS (pt, Qt, gp):
    E = EllipticCurve(GF(gp[2]),[gp[0],gp[1]])
    N = E.order()
    m = sqrt(N).round() + 1
    BSL = [0]*(m+1)
    GSL = [0]*(m+1)
    BSL[0] = pt
    for j in range(1, m+1):
        BSL[j] = ECTimes(pt, j, gp)
    pt2 = BSL[m]
    GSL[0] = pt2
    for j in range(1, m+1):
        GSL[j] = ECAdd(Qt, ECInverse(ECTimes(pt2, j, gp), gp), gp)
    for i in range(1, m+1 ):
        for j in range(1, m+1):
            if BSL[i] == GSL[j]:
                DL = (i + j * m) % N
                print ("Discrete log is {0}".format(DL))
                return DL

#


def ASCIIPad(Mess,Mod):
    K = []
    for letter in Mess:
        K.append(ord(letter))
    L = Mod.ndigits()
    l = len(K)
    y = ZZ(math.floor(L/3))
    count = 0
    padded = []
    buffer = ""
    for numChar in K:
        numChar+=100
        buffer+=str(numChar)
        count+=1
        if count==y:
            padded.append(ZZ(buffer))
            buffer = ""
            count = 0
    if len(buffer)>0:
        padded.append(ZZ(buffer))
    return padded

def ASCIIDepad(Number):
    N = "";
    n = Number.ndigits() % 3;
    if (n > 0):
        print("This is not a padded ASCII string\n");
    else:
        L = [((Number - (Number % (1000^i)))/1000^i)%1000 - 100 for i in range(Number.ndigits()/3)];
        for i in range(Number.ndigits()/3):
            N = chr(L[i]) + N;
    return(N);
def ECRAdd(Point1,Point2,Group):
    a = Group[0]
    b = Group[1]
    p = Group[2]
    if Point1!=[]:
        x1 = Point1[0]
        y1 = Point1[1]
    if Point2!=[]:
        x2 = Point2[0]
        y2 = Point2[1]
    if ZZ(mod(4*a^3 + 27*b^2, p)) == 0:
        print ("This is not an ellitpic curve")
    elif Point1!=[] and ZZ(mod(y1^2, p)) != ZZ(mod(x1^3 + a*x1 + b,p)):
        print ("Point 1 is not on the elliptic curve.")
    elif Point2!=[] and ZZ(mod(y2^2, p)) != ZZ(mod(x2^3 + a*x2 + b,p)):
        print ("Point 2 is not on the elliptic curve.")
    else:
        if Point1==[]:
            R=Point2
        elif Point2=={}:
            R=Point1
        else:
            if x1==x2 and 0==ZZ(mod(y1+y2,p)):
                R=[]
            elif x1==x2 and y1==y2:
                R=ECRDouble(Point1,Group)
                if R==True:
                    return(True)
            else:
                g=gcd(x1-x2,p)
                if (g>1):
                    print ("factor is {0}".format(g))
                    return(True)
                s=ZZ(mod((y1-y2)/(x1-x2),p))
                x=ZZ(mod(s^2-(x1+x2),p))
                y=ZZ(mod(s*(x1-x)-y1,p))
                R=[x,y]
    return R



def ECRDouble(Point,Group):
    a = Group[0]
    b = Group[1]
    p = Group[2]
    if Point!=[]:
        x1 = Point[0]
        y1 = Point[1]
        if ZZ(mod(4*a^3 + 27*b^2, p)) == 0:
            print ("This is not an ellptic curve")
        elif Point!= [] and ZZ(mod(y1^2,p))!= ZZ(mod(x1^3+a*x1+b,p)):
            print ("point to double not on elliptic curve")
        elif y1==0:
            R=[]
        else:
            g = gcd(y1,p)
            if g>1:
                print ("Factor is {0}".format(g))
                return True
            s = ZZ(mod((3*x1^2+a)/(2*y1),p))
            x = ZZ(mod(s^2-(x1+x1),p))
            y = ZZ(mod(s*(x1-x)-y1,p))
            R = [x,y]
    else:
        R=[]
    return R




def ECRTimes(Point,scalar,Group):
    ECIDENTITY = []
    if Point==ECIDENTITY or scalar ==0:
        return ECIDENTITY
    else:
        m = scalar
        pt = Point
        x = ECIDENTITY
        j=1
        while j<(scalar +1):
            if m%2==0:
                m = m/2
            else:
                m=(m-1)/2
                x=ECRAdd(x,pt,Group)
                if x==True:
                    return true
            if m==0:
                return x
            pt = ECRDouble(pt,Group)
            if pt==True:
                return true
            j+=1

def ECRInverse (Point, Group):
    if Point == []:
        return(Point)
    else:
        p = Group[2]
        x = Point[0]
        y = Point[1]
        return([x,(p - y) % p])





# Problem 1. Create two KMOV keys: (N1, s1), (N2, s2) and their corresponding private keys t1 and t2 #

p1 = next_prime(720560120381)
q1 = next_prime(881530194091)
N1 = p1*q1
s1 = 577

print('Check for conditions for iterated encryption\n')
p1%3
q1%3
gcd(s1,((p1+1)*(q1+1)))



p2 = next_prime(125650917693)
q2 = next_prime(665939418001)
N2 = p2*q2
s2 = 937

print('Check for conditions for iterated encryption\n')
p2%3
q2%3
gcd(s2,((p2+1)*(q2+1)))




t1 = (1/s1) % ((p1 + 1) * (q1 + 1))
t2 = (1/s2) % ((p2 + 1) * (q2 + 1))






# Encrypt the plaintext "Security" using the (N1, s1) key #

M = 'Security'
m=ASCIIPad(M,N1)

b1=(1-m[0]^3) %N1
E1=[0,b1,N1]
pt1=[m[0],1]

c1=ECRTimes(pt1,s1,E1)
print("First encryption ciphertext:")
c1



# Encrypt the ciphertext from Step A using the (N2,s2) key #

b2=(c1[1]^2-c1[0]^3) %N2
E2=[0,b2,N2]
c2=ECRTimes(c1,s2,E2)
print("Second encryption ciphertext:")
c2


# Decrypt the double encrypted message from Step B using the private keys t1 and t2 #
B1=(c2[1]^2-c2[0]^3) %N2
ED1=[0,B1,N2]
ptd1=ECRTimes(c2,t2,ED1)
print("First decryption ciphertext:")
ptd1



B2=(ptd1[1]^2-ptd1[0]^3) %N1
ED2=[0,B2,N1]
ptd2=ECRTimes(ptd1,t1,ED2)
ptd2= ptd2[0]
print("Second decryption plaintext:")
ptd2





# Problem 2


# KMOV key

p3 = next_prime(64077110971868597159)
q3 = next_prime(34087986736232991301)
N3 = p3*q3

s3 = 733

print('Check to ensure that encryption will work\n') # checking p and q satisfy p = 2 mod n and q = 2 mod n and that gcd is 1
p3 % 3
q3 % 3



t3 = (1/s3) % ((p3 + 1) * (q3 + 1))

# ECDSA signature key


A=162603078113260023900460633573
B=0
p=next_prime(527827720449100385233476887371)

G=[A,B,p]

print("The elliptic curve group is\n G=",[A,B,p])



E = EllipticCurve(GF(p),[A,B])
Gp = E.order() # order of the elliptic group G

print("The order of the elliptic curve group is",Gp)




g=ECSearch(78657643,894579475973497, G)

print("The base point is g=",g)




gorder=findptOrder(g,G) 

print("The order of the base point g is",gorder)


x= 903834155215769

print("The private key is x=", x)



b=ECTimes(g,x,G)

print("The public elliptic curve point is\n b=", b)

# encrypt the plaintext "Cryptology" using the KMOV key

message3 = 'Cryptology'
m3 = ASCIIPad(message3,N3)

b3 = (1-m3[0]^3) % N3 # equation code given in KMOV encryption video
E3 = [0,b3,N3]
pt3 = [m3[0],1]

c3 = ECRTimes(pt3,s3,E3)
c3 # our ciphertext

# sign it using the ECDSA key

m3 = ASCIIPad(message3,(p/48).floor())
m =m3[0]

r = 892173201
gord=findptOrder(g,G)

gcd(r,gord)
R = ECTimes(g,r,G)
Y = R[0]

m = ZZ(m)
Y= ZZ(Y)
r = ZZ(r)
S= mod((m+x*Y)/r,gord)

print("Y=", Y, "\n S=", S)
